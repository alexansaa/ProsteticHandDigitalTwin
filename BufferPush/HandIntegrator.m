NET.addAssembly('D:\Repositorios_Politecnica\TesisProj\BufferManager\obj\Debug\BufferManager.dll');
prothesisCorrections = BufferManager.ProthesisCorrection();
                
% Create two independent simulators
indexFinger = FingerController('RIn', 'configurationSimpleFinger.json');
middleFinger = FingerController('RMd', 'configurationSimpleFinger.json');
ringFinger = FingerController('RRn', 'configurationSimpleFinger.json');
pickyFinger = FingerController('RPk', 'configurationSimpleFinger.json');

% definir la manera en que se obtiene valores de tension
tmag = @(t) 160 * sin(pi * 0.05 * t);

% definir el loop de simulacion (revisar)
t0 = 0;
tf = 60;
dt = 1;
time  = t0:dt:tf;

N = numel(time);

tmag_reg = zeros(N);

%indexFingertheta1

Index = struct( ...
    'th1', zeros(1, N), ...
    'th2', zeros(1, N), ...
    'th3', zeros(1, N), ...
    'o1',  zeros(1, N), ...
    'o2',  zeros(1, N), ...
    'o3',  zeros(1, N), ...
    'a1',  zeros(1, N), ...
    'a2',  zeros(1, N), ...
    'a3',  zeros(1, N) ...
);

Index.th1(1) = indexFinger.Simulator.theta1_init;
Index.th2(1) = indexFinger.Simulator.theta2_init;
Index.th3(1) = indexFinger.Simulator.theta3_init;

Index.o1(1) = indexFinger.Simulator.omega1_init;
Index.o2(1) = indexFinger.Simulator.omega2_init;
Index.o3(1) = indexFinger.Simulator.omega3_init;

Index.a1(1) = indexFinger.Simulator.alpha1_init;
Index.a2(1) = indexFinger.Simulator.alpha2_init;
Index.a3(1) = indexFinger.Simulator.alpha3_init;

%

Middle = struct( ...
    'th1', zeros(1, N), ...
    'th2', zeros(1, N), ...
    'th3', zeros(1, N), ...
    'o1',  zeros(1, N), ...
    'o2',  zeros(1, N), ...
    'o3',  zeros(1, N), ...
    'a1',  zeros(1, N), ...
    'a2',  zeros(1, N), ...
    'a3',  zeros(1, N) ...
);

Middle.th1(1) = middleFinger.Simulator.theta1_init;
Middle.th2(1) = middleFinger.Simulator.theta2_init;
Middle.th3(1) = middleFinger.Simulator.theta3_init;

Middle.o1(1) = middleFinger.Simulator.omega1_init;
Middle.o2(1) = middleFinger.Simulator.omega2_init;
Middle.o3(1) = middleFinger.Simulator.omega3_init;

Middle.a1(1) = middleFinger.Simulator.alpha1_init;
Middle.a2(1) = middleFinger.Simulator.alpha2_init;
Middle.a3(1) = middleFinger.Simulator.alpha3_init;

Ring = struct( ...
    'th1', zeros(1, N), ...
    'th2', zeros(1, N), ...
    'th3', zeros(1, N), ...
    'o1',  zeros(1, N), ...
    'o2',  zeros(1, N), ...
    'o3',  zeros(1, N), ...
    'a1',  zeros(1, N), ...
    'a2',  zeros(1, N), ...
    'a3',  zeros(1, N) ...
);

Ring.th1(1) = ringFinger.Simulator.theta1_init;
Ring.th2(1) = ringFinger.Simulator.theta2_init;
Ring.th3(1) = ringFinger.Simulator.theta3_init;

Ring.o1(1) = ringFinger.Simulator.omega1_init;
Ring.o2(1) = ringFinger.Simulator.omega2_init;
Ring.o3(1) = ringFinger.Simulator.omega3_init;

Ring.a1(1) = ringFinger.Simulator.alpha1_init;
Ring.a2(1) = ringFinger.Simulator.alpha2_init;
Ring.a3(1) = ringFinger.Simulator.alpha3_init;

Picky = struct( ...
    'th1', zeros(1, N), ...
    'th2', zeros(1, N), ...
    'th3', zeros(1, N), ...
    'o1',  zeros(1, N), ...
    'o2',  zeros(1, N), ...
    'o3',  zeros(1, N), ...
    'a1',  zeros(1, N), ...
    'a2',  zeros(1, N), ...
    'a3',  zeros(1, N) ...
);

Picky.th1(1) = pickyFinger.Simulator.theta1_init;
Picky.th2(1) = pickyFinger.Simulator.theta2_init;
Picky.th3(1) = pickyFinger.Simulator.theta3_init;

Picky.o1(1) = pickyFinger.Simulator.omega1_init;
Picky.o2(1) = pickyFinger.Simulator.omega2_init;
Picky.o3(1) = pickyFinger.Simulator.omega3_init;

Picky.a1(1) = pickyFinger.Simulator.alpha1_init;
Picky.a2(1) = pickyFinger.Simulator.alpha2_init;
Picky.a3(1) = pickyFinger.Simulator.alpha3_init; 

for k = 2:N
    t_init = time(k-1);
    t_finn = time(k);
    delta_dt = 1e-3;
    delta_time  = t_init:delta_dt:t_finn;
    
    n_min = numel(delta_time);

    tmag_reg(k) = tmag(t_finn);

    % Run simulation - Index
    indexFinger = indexFinger.run( ...
        tmag_reg(k-1), ...
        Index.th1(k-1), ...
        Index.th2(k-1), ...
        Index.th3(k-1), ...
        Index.o1(k-1), ...
        Index.o2(k-1), ...
        Index.o3(k-1), ...
        Index.a1(k-1), ...
        Index.a2(k-1), ...
        Index.a3(k-1),...
        n_min, ...
        delta_dt);
    
    Index.th1(k) = indexFinger.Simulator.results.theta1(end);
    Index.th2(k) = indexFinger.Simulator.results.theta2(end);
    Index.th3(k) = indexFinger.Simulator.results.theta3(end);
    
    Index.o1(k) = indexFinger.Simulator.results.omega1(end);
    Index.o2(k) = indexFinger.Simulator.results.omega2(end);
    Index.o3(k) = indexFinger.Simulator.results.omega3(end);
    
    Index.a1(k) = indexFinger.Simulator.results.alpha1(end);
    Index.a2(k) = indexFinger.Simulator.results.alpha2(end);
    Index.a3(k) = indexFinger.Simulator.results.alpha3(end);

    correctedTh1 = prothesisCorrections.Correct_RInPxJ(Index.th1(k) * 180/pi());
    correctedTh2 = prothesisCorrections.Correct_RInMdJ(Index.th2(k) * 180/pi());
    correctedTh3 = prothesisCorrections.Correct_RInDsJ(Index.th3(k) * 180/pi());

    indexFinger.digitalTwinImpresion(correctedTh1, correctedTh2, correctedTh3, 0);

    % Run simulation - Middle
    middleFinger = middleFinger.run( ...
        tmag_reg(k-1), ...
        Middle.th1(k-1), ...
        Middle.th2(k-1), ...
        Middle.th3(k-1), ...
        Middle.o1(k-1), ...
        Middle.o2(k-1), ...
        Middle.o3(k-1), ...
        Middle.a1(k-1), ...
        Middle.a2(k-1), ...
        Middle.a3(k-1),...
        n_min, ...
        delta_dt);

    Middle.th1(k) = middleFinger.Simulator.results.theta1(end);
    Middle.th2(k) = middleFinger.Simulator.results.theta2(end);
    Middle.th3(k) = middleFinger.Simulator.results.theta3(end);
    
    Middle.o1(k) = middleFinger.Simulator.results.omega1(end);
    Middle.o2(k) = middleFinger.Simulator.results.omega2(end);
    Middle.o3(k) = middleFinger.Simulator.results.omega3(end);
    
    Middle.a1(k) = middleFinger.Simulator.results.alpha1(end);
    Middle.a2(k) = middleFinger.Simulator.results.alpha2(end);
    Middle.a3(k) = middleFinger.Simulator.results.alpha3(end);

    correctedTh1 = prothesisCorrections.Correct_RMdPxJ(Middle.th1(k) * 180/pi());
    correctedTh2 = prothesisCorrections.Correct_RMdMdJ(Middle.th2(k) * 180/pi());
    correctedTh3 = prothesisCorrections.Correct_RMdDsJ(Middle.th3(k) * 180/pi());

    middleFinger.digitalTwinImpresion(correctedTh1, correctedTh2, correctedTh3, 0);

    % Run simulation - Ring
    ringFinger = ringFinger.run( ...
        tmag_reg(k-1), ...
        Ring.th1(k-1), ...
        Ring.th2(k-1), ...
        Ring.th3(k-1), ...
        Ring.o1(k-1), ...
        Ring.o2(k-1), ...
        Ring.o3(k-1), ...
        Ring.a1(k-1), ...
        Ring.a2(k-1), ...
        Ring.a3(k-1),...
        n_min, ...
        delta_dt);
    
    Ring.th1(k) = ringFinger.Simulator.results.theta1(end);
    Ring.th2(k) = ringFinger.Simulator.results.theta2(end);
    Ring.th3(k) = ringFinger.Simulator.results.theta3(end);
    
    Ring.o1(k) = ringFinger.Simulator.results.omega1(end);
    Ring.o2(k) = ringFinger.Simulator.results.omega2(end);
    Ring.o3(k) = ringFinger.Simulator.results.omega3(end);
    
    Ring.a1(k) = ringFinger.Simulator.results.alpha1(end);
    Ring.a2(k) = ringFinger.Simulator.results.alpha2(end);
    Ring.a3(k) = ringFinger.Simulator.results.alpha3(end);

    correctedTh1 = prothesisCorrections.Correct_RRnPxJ(Ring.th1(k) * 180/pi());
    correctedTh2 = prothesisCorrections.Correct_RRnMdJ(Ring.th2(k) * 180/pi());
    correctedTh3 = prothesisCorrections.Correct_RRnDsJ(Ring.th3(k) * 180/pi());

    ringFinger.digitalTwinImpresion(correctedTh1, correctedTh2, correctedTh3, 0);

    % Run simulation - Picky
    pickyFinger = pickyFinger.run( ...
        tmag_reg(k-1), ...
        Picky.th1(k-1), ...
        Picky.th2(k-1), ...
        Picky.th3(k-1), ...
        Picky.o1(k-1), ...
        Picky.o2(k-1), ...
        Picky.o3(k-1), ...
        Picky.a1(k-1), ...
        Picky.a2(k-1), ...
        Picky.a3(k-1),...
        n_min, ...
        delta_dt);

    Picky.th1(k) = pickyFinger.Simulator.results.theta1(end);
    Picky.th2(k) = pickyFinger.Simulator.results.theta2(end);
    Picky.th3(k) = pickyFinger.Simulator.results.theta3(end);
    
    Picky.o1(k) = pickyFinger.Simulator.results.omega1(end);
    Picky.o2(k) = pickyFinger.Simulator.results.omega2(end);
    Picky.o3(k) = pickyFinger.Simulator.results.omega3(end);
    
    Picky.a1(k) = pickyFinger.Simulator.results.alpha1(end);
    Picky.a2(k) = pickyFinger.Simulator.results.alpha2(end);
    Picky.a3(k) = pickyFinger.Simulator.results.alpha3(end);

    correctedTh1 = prothesisCorrections.Correct_RPkPxJ(Picky.th1(k) * 180/pi());
    correctedTh2 = prothesisCorrections.Correct_RPkMdJ(Picky.th2(k) * 180/pi());
    correctedTh3 = prothesisCorrections.Correct_RPkDsJ(Picky.th3(k) * 180/pi());

    pickyFinger.digitalTwinImpresion(correctedTh1, correctedTh2, correctedTh3, 0);
end

indexFinger.Simulator.plotTripleFinger(Index.th1, Index.th2, Index.th3);
middleFinger.Simulator.plotTripleFinger(Middle.th1, Middle.th2, Middle.th3);
ringFinger.Simulator.plotTripleFinger(Ring.th1, Ring.th2, Ring.th3);
pickyFinger.Simulator.plotTripleFinger(Picky.th1, Picky.th2, Picky.th3);

% definir la retroalimentacion de valores para continuar con la simulacion
% usar el metodo para pushar informacion al buffer
% usar el metodo para leer informacion del buffer como parte de la
% retroalimentacion





% Plot results for each
% finger1.plotResults();
% finger2.plotResults();
